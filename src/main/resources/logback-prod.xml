<?xml version="1.0" encoding="utf-8" ?>
<!--scan 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
 scan="true" scanPeriod="60 seconds" -->
<configuration debug="false">
    <!--  邮件 start -->
    <!-- SMTP server的地址，必需指定。如网易的SMTP服务器地址是： smtp.163.com -->
    <property name="smtpHost" value="smtp.***.com"/><!--填入要发送邮件的smtp服务器地址(问DBA或者经理啥的就知道)-->
    <!-- SMTP server的端口地址。默认值：25 -->
    <property name="smtpPort" value="25"/>
    <!-- 发送邮件账号，默认为null -->
    <property name="username" value="****"/><!--发件人账号-->
    <!-- 发送邮件密码，默认为null -->
    <property name="password" value="***"/><!--发件人密码-->
    <!-- 如果设置为true，appender将会使用SSL连接到日志服务器。默认值：false -->
    <property name="SSL" value="false"/>
    <!-- 指定发送到那个邮箱，可设置多个<to>属性，指定多个目的邮箱 -->
    <property name="email_to" value="****"/><!--收件人账号多个可以逗号隔开-->
    <!-- 指定发件人名称。如果设置成“&lt;ADMIN&gt; ”，则邮件发件人将会是“<ADMIN> ”
        经过测试，现在必须和发件箱一致
    -->
    <property name="email_from" value="*****"/>
    <!-- 指定emial的标题，它需要满足PatternLayout中的格式要求。如果设置成“Log: %logger - %msg ”，就案例来讲，则发送邮件时，
    标题为“【Error】: com.foo.Bar - Hello World ”。 默认值："%logger{20} - %m". -->
    <property name="email_subject" value="[Error]: %logger"/>
    <!--邮件end-->

    <property name="FILE_LOG_PATTERN"
              value="${FILE_LOG_PATTERN:-%d{yyyy-MM-dd HH:mm:ss.SSS} ${LOG_LEVEL_PATTERN:-%5p} ${PID:- } --- [%t] %-40.40logger{39} : %m%n}"/>
    <!--配置颜色-->
    <!--<property name="CONSOLE_LOG_PATTERN" value="${CONSOLE_LOG_PATTERN:-%highlight(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %highlight(${LOG_LEVEL_PATTERN:-%5p}) %highlight(${PID:- }){magenta} %highlight(-&#45;&#45;){faint} %highlight([%15.15t]){faint} %highlight(%-40.40logger{39}){cyan} %highlight(:){faint} %highlight(%m%n)}"/>-->
    <!-- 彩色日志格式
        "%black", "%red", "%green","%yellow","%blue", "%magenta","%cyan", "%white", "%gray", "%boldRed","%boldGreen", "%boldYellow", "%boldBlue", "%boldMagenta""%boldCyan", "%boldWhite" and "%highlight"
    -->
    <property name="CONSOLE_LOG_PATTERN"
              value="%highlight([%-5level]) %white(%d{yyyy-MM-dd HH:mm:ss SSS}) %green([%thread]) %magenta(%logger) - %blue(%msg%n)"/>

    <!--设置变量： <property>
    设置日志目录-->
    <property name="LOG_HOME" value="${user.home}/logs/superior-java-blogs"/>
    <!--设置日志名-->
    <property name="LOG_NAME" value="superior-java-blogs"/>
    <!--设置应用名-->
    <contextName>lifecircle-service-test</contextName>
    <!--key:标识此<timestamp> 的名字；datePattern：设置将当前时间（解析配置文件的时间）转换为字符串的模式，遵循java.txt.SimpleDateFormat的格式。-->
    <!--<timestamp key="bySecond" datePattern="yyyyMMdd'T'HHmmss"/>-->

    <!--日志输出到控制台-->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <!-- %caller{1}，输出生成日志的调用者的位置信息，整数选项表示输出信息深度。 尽量避免使用 - 定位到行号 -->
            <!--<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} [%msg] [huijava]%n</pattern>-->
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
            <charset>utf8</charset>
        </encoder>
    </appender>

    <appender name="console_file"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <!--<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>-->
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <!-- 这个会打印出所有的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档
        每天保存一份日志
        -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>
                ${LOG_HOME}/${LOG_NAME}_console_%d{yyyy-MM-dd}.log.gz
            </fileNamePattern>
            <maxHistory>30</maxHistory>
        </rollingPolicy>
    </appender>


    <!--错误日志 RollingFileAppender：自动追加日志信息到文件中，直至文件达到预定的大小，然后自动重新生成另外一个文件来记录之后的日志。-->
    <appender name="error" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <!--<pattern>%d{yyyy-MM-dd'T'HH:mm:ssZ} | [%thread] | %-5level | %logger{50} | %msg%n</pattern>-->
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>
                ${LOG_HOME}/${LOG_NAME}_error_%d{yyyy-MM-dd}.log.gz
            </fileNamePattern>
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- ERROR邮件发送 -->
    <appender name="EMAIL" class="ch.qos.logback.classic.net.SMTPAppender">
        <SMTPHost>${smtpHost}</SMTPHost>
        <SMTPPort>${smtpPort}</SMTPPort>
        <Username>${username}</Username>
        <Password>${password}</Password>
        <asynchronousSending>true</asynchronousSending>
        <SSL>${SSL}</SSL>
        <To>${email_to}</To>
        <From>${email_from}</From>
        <Subject>${email_subject}</Subject>
        　　　　 <!-- html格式-->
        <layout class="ch.qos.logback.classic.html.HTMLLayout">
            <Pattern>%date%level%thread%logger{0}%line%message</Pattern>
        </layout>
        <!-- 这里采用等级过滤器 指定等级相符才发送 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <cyclicBufferTracker class="ch.qos.logback.core.spi.CyclicBufferTracker">
            <!-- 每个电子邮件只发送一个日志条目 -->
            <bufferSize>1</bufferSize>
        </cyclicBufferTracker>
    </appender>


    <!--错误日志对像-->
    <!--定义logger，只有定义了logger并引入的appender，appender才会生效-->
    <logger name="com.huijava" level="INFO">
        <appender-ref ref="console_file"/>
        <appender-ref ref="error"/>
        <appender-ref ref="EMAIL"/>
    </logger>

    <!--建立一个默认的root的logger-->
    <root level="INFO">
        <appender-ref ref="console"/>
    </root>

</configuration>
