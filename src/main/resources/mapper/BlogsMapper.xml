<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.huijava.superiorjavablogs.mapper.BlogsMapper">
    <cache eviction='SOFT' flushInterval='2592000000'/>
    <!--这个更高级的配置创建了一个 FIFO 缓存,并每隔 60 秒刷新,存数结果对象或列表的 512 个引用,而且返回的对象被认为是只读的,因此在不同线程中的调用者之间修改它们会导致冲突。可用的收回策略有, 默认的是 LRU:-->
    <!--1.LRU – 最近最少使用的:移除最长时间不被使用的对象。-->
    <!--2.FIFO – 先进先出:按对象进入缓存的顺序来移除它们。-->
    <!--3.SOFT – 软引用:移除基于垃圾回收器状态和软引用规则的对象。-->
    <!--4.WEAK – 弱引用:更积极地移除基于垃圾收集器状态和弱引用规则的对象。-->

    <resultMap id="BaseResultMap" type="com.huijava.superiorjavablogs.entity.Blogs">
        <!--
          WARNING - @mbg.generated
        -->
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="title" jdbcType="VARCHAR" property="title"/>
        <result column="blog_token" jdbcType="VARCHAR" property="blogToken"/>
        <result column="author" jdbcType="VARCHAR" property="author"/>
        <result column="summary" jdbcType="VARCHAR" property="summary"/>
        <result column="original_url" jdbcType="VARCHAR" property="originalUrl"/>
        <result column="publish_time" jdbcType="TIMESTAMP" property="publishTime"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
        <result column="status" jdbcType="TINYINT" property="status"/>
        <result column="top_count" jdbcType="INTEGER" property="topCount"/>
        <result column="view_count" jdbcType="INTEGER" property="viewCount"/>
        <result column="comment_count" jdbcType="INTEGER" property="commentCount"/>
        <result column="category_id" jdbcType="INTEGER" property="categoryId"/>
        <result column="create_id" jdbcType="INTEGER" property="createId"/>
        <result column="update_id" jdbcType="INTEGER" property="updateId"/>
        <result column="version" jdbcType="INTEGER" property="version"/>
        <result column="ext1" jdbcType="VARCHAR" property="ext1"/>
        <result column="ext2" jdbcType="VARCHAR" property="ext2"/>
        <result column="ext3" jdbcType="VARCHAR" property="ext3"/>
        <result column="collect_count" jdbcType="INTEGER" property="collectCount"/>
        <result column="original" jdbcType="TINYINT" property="original"/>
        <result column="content" jdbcType="LONGVARCHAR" property="content"/>
    </resultMap>
</mapper>